// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: devmon.proto

package devmon1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Devmon_ShowMetrics_FullMethodName   = "/devmon.Devmon/ShowMetrics"
	Devmon_SendMetrics_FullMethodName   = "/devmon.Devmon/SendMetrics"
	Devmon_StreamMetrics_FullMethodName = "/devmon.Devmon/StreamMetrics"
)

// DevmonClient is the client API for Devmon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevmonClient interface {
	ShowMetrics(ctx context.Context, in *ShowMetricsRequest, opts ...grpc.CallOption) (*ShowMetricsResponse, error)
	SendMetrics(ctx context.Context, in *SendMetricsRequest, opts ...grpc.CallOption) (*SendMetricsResponse, error)
	StreamMetrics(ctx context.Context, in *StreamMetricsRequest, opts ...grpc.CallOption) (*StreamMetricsResponse, error)
}

type devmonClient struct {
	cc grpc.ClientConnInterface
}

func NewDevmonClient(cc grpc.ClientConnInterface) DevmonClient {
	return &devmonClient{cc}
}

func (c *devmonClient) ShowMetrics(ctx context.Context, in *ShowMetricsRequest, opts ...grpc.CallOption) (*ShowMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowMetricsResponse)
	err := c.cc.Invoke(ctx, Devmon_ShowMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devmonClient) SendMetrics(ctx context.Context, in *SendMetricsRequest, opts ...grpc.CallOption) (*SendMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMetricsResponse)
	err := c.cc.Invoke(ctx, Devmon_SendMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devmonClient) StreamMetrics(ctx context.Context, in *StreamMetricsRequest, opts ...grpc.CallOption) (*StreamMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamMetricsResponse)
	err := c.cc.Invoke(ctx, Devmon_StreamMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevmonServer is the server API for Devmon service.
// All implementations must embed UnimplementedDevmonServer
// for forward compatibility.
type DevmonServer interface {
	ShowMetrics(context.Context, *ShowMetricsRequest) (*ShowMetricsResponse, error)
	SendMetrics(context.Context, *SendMetricsRequest) (*SendMetricsResponse, error)
	StreamMetrics(context.Context, *StreamMetricsRequest) (*StreamMetricsResponse, error)
	mustEmbedUnimplementedDevmonServer()
}

// UnimplementedDevmonServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDevmonServer struct{}

func (UnimplementedDevmonServer) ShowMetrics(context.Context, *ShowMetricsRequest) (*ShowMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowMetrics not implemented")
}
func (UnimplementedDevmonServer) SendMetrics(context.Context, *SendMetricsRequest) (*SendMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMetrics not implemented")
}
func (UnimplementedDevmonServer) StreamMetrics(context.Context, *StreamMetricsRequest) (*StreamMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamMetrics not implemented")
}
func (UnimplementedDevmonServer) mustEmbedUnimplementedDevmonServer() {}
func (UnimplementedDevmonServer) testEmbeddedByValue()                {}

// UnsafeDevmonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevmonServer will
// result in compilation errors.
type UnsafeDevmonServer interface {
	mustEmbedUnimplementedDevmonServer()
}

func RegisterDevmonServer(s grpc.ServiceRegistrar, srv DevmonServer) {
	// If the following call pancis, it indicates UnimplementedDevmonServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Devmon_ServiceDesc, srv)
}

func _Devmon_ShowMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevmonServer).ShowMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devmon_ShowMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevmonServer).ShowMetrics(ctx, req.(*ShowMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devmon_SendMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevmonServer).SendMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devmon_SendMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevmonServer).SendMetrics(ctx, req.(*SendMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devmon_StreamMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevmonServer).StreamMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Devmon_StreamMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevmonServer).StreamMetrics(ctx, req.(*StreamMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Devmon_ServiceDesc is the grpc.ServiceDesc for Devmon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Devmon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "devmon.Devmon",
	HandlerType: (*DevmonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowMetrics",
			Handler:    _Devmon_ShowMetrics_Handler,
		},
		{
			MethodName: "SendMetrics",
			Handler:    _Devmon_SendMetrics_Handler,
		},
		{
			MethodName: "StreamMetrics",
			Handler:    _Devmon_StreamMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "devmon.proto",
}
